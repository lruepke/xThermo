if(Build_IAPWS_Others)
  add_definitions(-DIAPWS_OTHERS)
  INCLUDE_DIRECTORIES(H2O/IAPWS_Others)

  # Build CoolProp
  option(Build_CoolProp "whether build CoolProp class" ON)
  if(Build_CoolProp)
    set(CoolProp_DIR "${CMAKE_SOURCE_DIR}/../ThirdParties/install/CoolProp" CACHE FILEPATH "CoolProp path contains include, lib")
    if(EXISTS ${CoolProp_DIR})
      set(CoolProp_INCLUDE_DIR "${CoolProp_DIR}/include" CACHE FILEPATH "include path of CoolProp")
      set(CoolProp_LIBRARY_DIR "${CoolProp_DIR}/lib" CACHE FILEPATH "lib path of CoolProp")
      INCLUDE_DIRECTORIES(${CoolProp_INCLUDE_DIR})
      set(CoolProp_LIBRARIES_SHARED ${CoolProp_LIBRARY_DIR}/libCoolProp${CMAKE_SHARED_LIBRARY_SUFFIX} )
      set(CoolProp_LIBRARIES_STATIC ${CoolProp_LIBRARY_DIR}/libCoolProp.a)
      link_directories(${CoolProp_LIBRARY_DIR})
      message(STATUS "CoolProp include path found: " ${CoolProp_INCLUDE_DIR} )  
      message(STATUS "CoolProp library path found: " ${CoolProp_LIBRARY_DIR})     
    else()
      message(FATAL_ERROR "CoolProp_DIR = ${CoolProp_DIR} doesn't exist. Please use option -DCoolProp_DIR=xxx set a correct path which contains include and lib dir")
    endif()
    INCLUDE_DIRECTORIES(${CoolProp_INCLUDE_DIR})
    list(APPEND SC_FILES_IAPWS_OTHERS ${CMAKE_CURRENT_SOURCE_DIR}/H2O/IAPWS_Others/CoolProp_class.cpp)
    list(APPEND STATIC_LIBS_IAPWS_OTHERS ${CoolProp_LIBRARIES_STATIC})
    list(APPEND SHARED_LIBS_IAPWS_OTHERS ${CoolProp_LIBRARIES_STATIC})
  endif(Build_CoolProp)
endif(Build_IAPWS_Others)

  # Build freesteam and its Python API for benchmark comparision
if(Build_IAPWS_Others)
  option(Build_freesteam "whether build freesteam class" ON)
  if(Build_freesteam)
    set(FREESTEAM_DIR "${CMAKE_SOURCE_DIR}/../ThirdParties/install/freesteam" CACHE FILEPATH "freesteam path contains include, lib")
    if(EXISTS ${FREESTEAM_DIR})
      set(FREESTEAM_INCLUDE_DIR "${FREESTEAM_DIR}/include" CACHE FILEPATH "include path of FREESTEAM")
      set(FREESTEAM_LIBRARY_DIR "${FREESTEAM_DIR}/lib" CACHE FILEPATH "lib path of FREESTEAM")
      INCLUDE_DIRECTORIES(${FREESTEAM_INCLUDE_DIR})
      set(FREESTEAM_LIBRARIES_SHARED ${FREESTEAM_LIBRARY_DIR}/libfreesteam${CMAKE_SHARED_LIBRARY_SUFFIX} )
      set(FREESTEAM_LIBRARIES_STATIC ${FREESTEAM_LIBRARY_DIR}/libfreesteam.a)
      link_directories(${FREESTEAM_LIBRARY_DIR})
      message(STATUS "freesteam include path found: " ${FREESTEAM_INCLUDE_DIR} )  
      message(STATUS "freesteam library path found: " ${FREESTEAM_LIBRARY_DIR})     
    else()
      message(FATAL_ERROR "FREESTEAM_DIR = ${FREESTEAM_DIR} doesn't exist. Please use option -DFREESTEAM_DIR=xxx set a correct path which contains include and lib dir")
    endif()
    INCLUDE_DIRECTORIES(${FREESTEAM_INCLUDE_DIR})
    list(APPEND SC_FILES_IAPWS_OTHERS ${CMAKE_CURRENT_SOURCE_DIR}/H2O/IAPWS_Others/freesteam_class.cpp)
    list(APPEND STATIC_LIBS_IAPWS_OTHERS ${FREESTEAM_LIBRARIES_STATIC})
    list(APPEND SHARED_LIBS_IAPWS_OTHERS ${FREESTEAM_LIBRARIES_STATIC})
  endif(Build_freesteam)
endif(Build_IAPWS_Others)

  # Build PROST and its Python API for benchmark comparision
if(Build_IAPWS_Others OR USE_IAPS84)
  option(Build_PROST "whether build freesteam class" ON)
  if(Build_PROST)
    set(PROST_DIR "${CMAKE_SOURCE_DIR}/../ThirdParties/install/PROST" CACHE FILEPATH "PROST path contains include, lib")
    if(EXISTS ${PROST_DIR})
      set(PROST_INCLUDE_DIR "${PROST_DIR}/include" CACHE FILEPATH "include path of PROST")
      set(PROST_LIBRARY_DIR "${PROST_DIR}/lib" CACHE FILEPATH "lib path of PROST")
      INCLUDE_DIRECTORIES(${PROST_INCLUDE_DIR})
      set(PROST_LIBRARIES_SHARED ${PROST_LIBRARY_DIR}/libPROST${CMAKE_SHARED_LIBRARY_SUFFIX} )
      set(PROST_LIBRARIES_STATIC ${PROST_LIBRARY_DIR}/libPROST.a)
      link_directories(${PROST_LIBRARY_DIR})
      message(STATUS "PROST include path found: " ${PROST_INCLUDE_DIR} )  
      message(STATUS "PROST library path found: " ${PROST_LIBRARY_DIR})     
    else()
      message(FATAL_ERROR "PROST_DIR = ${PROST_DIR} doesn't exist. Please use option -DPROST_DIR=xxx set a correct path which contains include and lib dir")
    endif()
    INCLUDE_DIRECTORIES(${PROST_INCLUDE_DIR})
    list(APPEND SC_FILES_IAPWS_OTHERS ${CMAKE_CURRENT_SOURCE_DIR}/H2O/IAPWS_Others/PROST_class.cpp)
    list(APPEND STATIC_LIBS_IAPWS_OTHERS ${PROST_LIBRARIES_STATIC})
    list(APPEND SHARED_LIBS_IAPWS_OTHERS ${PROST_LIBRARIES_STATIC})
  endif(Build_PROST)
  # message(STATUS "IAPWS other source: " ${SC_FILES_IAPWS_OTHERS})
  # message(STATUS "IAPWS other shared libs: " ${SHARED_LIBS_IAPWS_OTHERS})
  # message(STATUS "IAPWS other static libs: " ${STATIC_LIBS_IAPWS_OTHERS})
endif()
